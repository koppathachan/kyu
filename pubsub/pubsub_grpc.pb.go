// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pubsub

import (
	context "context"
	msg "github.com/sasidakh/q/msg"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	Publish(ctx context.Context, in *msg.Message, opts ...grpc.CallOption) (*PublishResult, error)
	Subscribe(ctx context.Context, in *msg.Queue, opts ...grpc.CallOption) (Publisher_SubscribeClient, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, in *msg.Message, opts ...grpc.CallOption) (*PublishResult, error) {
	out := new(PublishResult)
	err := c.cc.Invoke(ctx, "/pubsub.Publisher/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Subscribe(ctx context.Context, in *msg.Queue, opts ...grpc.CallOption) (Publisher_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Publisher_ServiceDesc.Streams[0], "/pubsub.Publisher/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Publisher_SubscribeClient interface {
	Recv() (*msg.Message, error)
	grpc.ClientStream
}

type publisherSubscribeClient struct {
	grpc.ClientStream
}

func (x *publisherSubscribeClient) Recv() (*msg.Message, error) {
	m := new(msg.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	Publish(context.Context, *msg.Message) (*PublishResult, error)
	Subscribe(*msg.Queue, Publisher_SubscribeServer) error
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) Publish(context.Context, *msg.Message) (*PublishResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublisherServer) Subscribe(*msg.Queue, Publisher_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s grpc.ServiceRegistrar, srv PublisherServer) {
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.Publisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*msg.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(msg.Queue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublisherServer).Subscribe(m, &publisherSubscribeServer{stream})
}

type Publisher_SubscribeServer interface {
	Send(*msg.Message) error
	grpc.ServerStream
}

type publisherSubscribeServer struct {
	grpc.ServerStream
}

func (x *publisherSubscribeServer) Send(m *msg.Message) error {
	return x.ServerStream.SendMsg(m)
}

// Publisher_ServiceDesc is the grpc.ServiceDesc for Publisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Publisher_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsub/pubsub.proto",
}
