// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package q

import (
	context "context"
	msg "github.com/sasidakh/kyu/q/msg"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QClient is the client API for Q service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QClient interface {
	Create(ctx context.Context, in *msg.Queue, opts ...grpc.CallOption) (*CreateResponse, error)
	Enqueue(ctx context.Context, in *msg.Message, opts ...grpc.CallOption) (*WriteResult, error)
	Dequeue(ctx context.Context, in *msg.Queue, opts ...grpc.CallOption) (Q_DequeueClient, error)
}

type qClient struct {
	cc grpc.ClientConnInterface
}

func NewQClient(cc grpc.ClientConnInterface) QClient {
	return &qClient{cc}
}

func (c *qClient) Create(ctx context.Context, in *msg.Queue, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/q.Q/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) Enqueue(ctx context.Context, in *msg.Message, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := c.cc.Invoke(ctx, "/q.Q/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) Dequeue(ctx context.Context, in *msg.Queue, opts ...grpc.CallOption) (Q_DequeueClient, error) {
	stream, err := c.cc.NewStream(ctx, &Q_ServiceDesc.Streams[0], "/q.Q/Dequeue", opts...)
	if err != nil {
		return nil, err
	}
	x := &qDequeueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Q_DequeueClient interface {
	Recv() (*msg.Message, error)
	grpc.ClientStream
}

type qDequeueClient struct {
	grpc.ClientStream
}

func (x *qDequeueClient) Recv() (*msg.Message, error) {
	m := new(msg.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QServer is the server API for Q service.
// All implementations must embed UnimplementedQServer
// for forward compatibility
type QServer interface {
	Create(context.Context, *msg.Queue) (*CreateResponse, error)
	Enqueue(context.Context, *msg.Message) (*WriteResult, error)
	Dequeue(*msg.Queue, Q_DequeueServer) error
	mustEmbedUnimplementedQServer()
}

// UnimplementedQServer must be embedded to have forward compatible implementations.
type UnimplementedQServer struct {
}

func (UnimplementedQServer) Create(context.Context, *msg.Queue) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedQServer) Enqueue(context.Context, *msg.Message) (*WriteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedQServer) Dequeue(*msg.Queue, Q_DequeueServer) error {
	return status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedQServer) mustEmbedUnimplementedQServer() {}

// UnsafeQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QServer will
// result in compilation errors.
type UnsafeQServer interface {
	mustEmbedUnimplementedQServer()
}

func RegisterQServer(s grpc.ServiceRegistrar, srv QServer) {
	s.RegisterService(&Q_ServiceDesc, srv)
}

func _Q_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg.Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/q.Q/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).Create(ctx, req.(*msg.Queue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/q.Q/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).Enqueue(ctx, req.(*msg.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_Dequeue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(msg.Queue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QServer).Dequeue(m, &qDequeueServer{stream})
}

type Q_DequeueServer interface {
	Send(*msg.Message) error
	grpc.ServerStream
}

type qDequeueServer struct {
	grpc.ServerStream
}

func (x *qDequeueServer) Send(m *msg.Message) error {
	return x.ServerStream.SendMsg(m)
}

// Q_ServiceDesc is the grpc.ServiceDesc for Q service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Q_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "q.Q",
	HandlerType: (*QServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Q_Create_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _Q_Enqueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dequeue",
			Handler:       _Q_Dequeue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "q/q.proto",
}
